import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Dialog from '@radix-ui/react-dialog';
const Instructions = () => {
    return (_jsxs(Dialog.Root, { children: [_jsx(Dialog.Trigger, { asChild: true, children: _jsx("button", { className: "px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors", children: "How to Play" }) }), _jsxs(Dialog.Portal, { children: [_jsx(Dialog.Overlay, { className: "fixed inset-0 bg-black/50" }), _jsxs(Dialog.Content, { className: "fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg shadow-xl w-[600px] max-h-[85vh] overflow-y-auto", children: [_jsx(Dialog.Title, { className: "text-2xl font-bold mb-4", children: "A* Pathfinding Visualizer" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "What is A* Pathfinding?" }), _jsx("p", { children: "A* (pronounced \"A-star\") is an informed search algorithm that finds the shortest path between two points. It combines Dijkstra's algorithm's focus on finding the shortest path with a heuristic function that estimates the distance to the goal, making it more efficient than traditional pathfinding algorithms." })] }), _jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Why A* Algorithm?" }), _jsxs("ul", { className: "list-disc pl-5 space-y-2", children: [_jsx("li", { children: "Guarantees the shortest path when using an admissible heuristic" }), _jsx("li", { children: "More efficient than Dijkstra's algorithm by using heuristic guidance" }), _jsx("li", { children: "Widely used in games, robotics, and navigation systems" }), _jsx("li", { children: "Balances completeness with computational efficiency" })] })] }), _jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "How to Use the Visualizer" }), _jsxs("ul", { className: "list-disc pl-5 space-y-2", children: [_jsxs("li", { children: [_jsx("strong", { children: "Create Walls:" }), " Click on cells to create or remove walls. Walls are obstacles that the algorithm must navigate around."] }), _jsxs("li", { children: [_jsx("strong", { children: "Adjust Grid Size:" }), " Use the size slider to create larger or smaller grids, testing how the algorithm performs in different spaces."] }), _jsxs("li", { children: [_jsx("strong", { children: "Control Speed:" }), " Adjust the visualization speed to see the algorithm work faster or slower."] }), _jsxs("li", { children: [_jsx("strong", { children: "Choose Mode:" }), _jsxs("ul", { className: "list-disc pl-5 mt-2", children: [_jsxs("li", { children: [_jsx("strong", { children: "Step Mode:" }), " Watch the algorithm explore paths step by step, with detailed information about each decision."] }), _jsxs("li", { children: [_jsx("strong", { children: "Challenge Mode:" }), " Test your understanding by predicting which path the algorithm will choose."] })] })] })] })] }), _jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Understanding the Algorithm" }), _jsxs("ul", { className: "list-disc pl-5 space-y-2", children: [_jsxs("li", { children: [_jsx("strong", { children: "Blue Cells (Visited):" }), " These are nodes the algorithm has explored. They turn blue as A* evaluates different possible paths."] }), _jsxs("li", { children: [_jsx("strong", { children: "Yellow Path:" }), " This is the optimal path found by the algorithm. It's chosen because it has the lowest total cost (f = g + h)."] }), _jsxs("li", { children: [_jsx("strong", { children: "Node Values:" }), " Hover over any cell to see:", _jsxs("ul", { className: "list-disc pl-5 mt-2", children: [_jsxs("li", { children: [_jsx("strong", { children: "f(n):" }), " Total estimated cost (g + h)"] }), _jsxs("li", { children: [_jsx("strong", { children: "g(n):" }), " Actual cost from start to current node"] }), _jsxs("li", { children: [_jsx("strong", { children: "h(n):" }), " Estimated cost from current node to goal (Manhattan distance)"] })] })] })] })] }), _jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Color Guide" }), _jsxs("ul", { className: "list-disc pl-5 space-y-2", children: [_jsxs("li", { children: [_jsx("span", { className: "inline-block w-4 h-4 bg-blue-500 rounded-sm mr-2" }), " Start node (where pathfinding begins)"] }), _jsxs("li", { children: [_jsx("span", { className: "inline-block w-4 h-4 bg-green-500 rounded-sm mr-2" }), " Goal node (destination)"] }), _jsxs("li", { children: [_jsx("span", { className: "inline-block w-4 h-4 bg-gray-800 rounded-sm mr-2" }), " Wall (obstacle that cannot be passed)"] }), _jsxs("li", { children: [_jsx("span", { className: "inline-block w-4 h-4 bg-blue-200 rounded-sm mr-2" }), " Visited nodes (paths the algorithm has explored)"] }), _jsxs("li", { children: [_jsx("span", { className: "inline-block w-4 h-4 bg-yellow-200 rounded-sm mr-2" }), " Final shortest path (optimal route found)"] })] })] }), _jsxs("section", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Tips for Learning" }), _jsxs("ul", { className: "list-disc pl-5 space-y-2", children: [_jsx("li", { children: "Start with a simple grid and gradually increase complexity" }), _jsx("li", { children: "Create different wall patterns to see how the algorithm adapts" }), _jsx("li", { children: "Watch how the algorithm prioritizes promising paths using the heuristic" }), _jsx("li", { children: "Compare the explored area with other pathfinding algorithms like Dijkstra's" })] })] })] }), _jsx(Dialog.Close, { asChild: true, children: _jsx("button", { className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600", children: "\u2715" }) })] })] })] }));
};
export default Instructions;
