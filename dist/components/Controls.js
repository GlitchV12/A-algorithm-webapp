import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Slider from '@radix-ui/react-slider';
import { useGridStore } from '../store/useGridStore';
import Instructions from './Instructions';
import * as Tooltip from '@radix-ui/react-tooltip';
const Controls = () => {
    const { speed, mode, setSpeed, setMode, startPathfinding, resetGrid, isRunning, gridSize, setGridSize } = useGridStore();
    return (_jsxs("div", { className: "flex flex-col gap-4 bg-white p-4 rounded-lg shadow-md", children: [_jsx("div", { className: "flex items-center gap-4 mb-4", children: _jsx(Instructions, {}) }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("button", { className: "px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50", onClick: () => startPathfinding(), disabled: isRunning, children: isRunning ? 'Finding Path...' : 'Start' }) }), _jsx(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: "Start the A* pathfinding algorithm visualization" })] }) }), _jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("button", { className: "px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors", onClick: () => resetGrid(), children: "Reset" }) }), _jsx(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: "Clear the grid and start over" })] }) })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("span", { className: "text-sm text-gray-600 w-20", children: "Grid Size:" }), _jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("div", { className: "flex-1", children: _jsxs(Slider.Root, { className: "relative flex items-center select-none touch-none w-[200px] h-5", value: [gridSize], onValueChange: ([newSize]) => setGridSize(newSize), min: 8, max: 30, step: 1, children: [_jsx(Slider.Track, { className: "bg-gray-200 relative grow rounded-full h-[3px]", children: _jsx(Slider.Range, { className: "absolute bg-blue-500 rounded-full h-full" }) }), _jsx(Slider.Thumb, { className: "block w-5 h-5 bg-blue-500 rounded-full hover:bg-blue-600 focus:outline-none", "aria-label": "Grid Size" })] }) }) }), _jsxs(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: ["Adjust grid size: ", gridSize, "x", gridSize, _jsx("br", {}), "Larger grids create more complex pathfinding scenarios"] })] }) })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("span", { className: "text-sm text-gray-600 w-20", children: "Speed:" }), _jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("div", { className: "flex-1", children: _jsxs(Slider.Root, { className: "relative flex items-center select-none touch-none w-[200px] h-5", value: [speed], onValueChange: ([newSpeed]) => setSpeed(newSpeed), max: 100, step: 1, children: [_jsx(Slider.Track, { className: "bg-gray-200 relative grow rounded-full h-[3px]", children: _jsx(Slider.Range, { className: "absolute bg-blue-500 rounded-full h-full" }) }), _jsx(Slider.Thumb, { className: "block w-5 h-5 bg-blue-500 rounded-full hover:bg-blue-600 focus:outline-none", "aria-label": "Speed" })] }) }) }), _jsxs(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: ["Adjust visualization speed", _jsx("br", {}), "Slower speeds help understand each step better"] })] }) })] })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("button", { className: `px-4 py-2 rounded-md ${mode === 'step' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`, onClick: () => setMode('step'), children: "Step Mode" }) }), _jsxs(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: ["Watch the algorithm explore paths step by step", _jsx("br", {}), "Great for understanding how A* makes decisions"] })] }) }), _jsx(Tooltip.Provider, { children: _jsxs(Tooltip.Root, { children: [_jsx(Tooltip.Trigger, { asChild: true, children: _jsx("button", { className: `px-4 py-2 rounded-md ${mode === 'challenge' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`, onClick: () => setMode('challenge'), children: "Challenge Mode" }) }), _jsxs(Tooltip.Content, { className: "bg-gray-800 text-white px-3 py-2 rounded text-sm", children: ["Test your understanding by predicting the path", _jsx("br", {}), "Try to guess which nodes A* will explore"] })] }) })] })] }));
};
export default Controls;
